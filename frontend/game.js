const choices = ["rock", "paper", "scissors"];
const buttons = document.querySelectorAll(".choice");
const resultText = document.getElementById("result");
const winsText = document.getElementById("wins");
const lossesText = document.getElementById("losses");
const drawsText = document.getElementById("draws");
const resetButton = document.getElementById("reset");

let stats = { wins: 0, losses: 0, draws: 0 }; // Alap√©rtelmezett √©rt√©kek

// üìå 1Ô∏è‚É£ Statisztik√°k bet√∂lt√©se a backendr≈ël (XMLHttpRequest)
function fetchStats() {
    const xhr = new XMLHttpRequest();
    xhr.open("GET", "http://localhost:3000/stats", true);
    xhr.onreadystatechange = function () {
        if (xhr.readyState === 4 && xhr.status === 200) {
            stats = JSON.parse(xhr.responseText);
            updateStatsUI();
        }
    };
    xhr.send();
}

// üìå 2Ô∏è‚É£ J√°t√©k ind√≠t√°sa
buttons.forEach(button => {
    button.addEventListener("click", () => {
        const playerChoice = button.dataset.choice;
        resultText.textContent = "A bot gondolkodik...";
        
        setTimeout(() => {
            const botChoice = choices[Math.floor(Math.random() * choices.length)];
            const result = determineWinner(playerChoice, botChoice);
            const result2 = determineWinner2(playerChoice, botChoice);

            updateStats(result); // üìå 3Ô∏è‚É£ K√ºldj√ºk az adatokat a backendnek

            resultText.textContent = `Te: ${emoji(playerChoice)} ${result2} Bot: ${emoji(botChoice)} ‚Üí ${result}`;
        }, 1000);
    });
});

// üìå 3Ô∏è‚É£ Adatok k√ºld√©se a backendnek (XMLHttpRequest)
function updateStats(result) {
    if (result === "Gy≈ëzt√©l!") stats.wins++;
    if (result === "Vesztett√©l!") stats.losses++;
    if (result === "D√∂ntetlen") stats.draws++;

    const xhr = new XMLHttpRequest();
    xhr.open("POST", "http://localhost:3000/stats/update", true);
    xhr.setRequestHeader("Content-Type", "application/json");
    xhr.onreadystatechange = function () {
        if (xhr.readyState === 4 && xhr.status === 200) {
            fetchStats(); // Friss√≠tj√ºk a statisztik√°kat a szerverr≈ël
        }
    };
    xhr.send(JSON.stringify(stats));
}

// üìå 4Ô∏è‚É£ Gy≈ëztes meghat√°roz√°sa
function determineWinner(player, bot) {
    if (player === bot) return "D√∂ntetlen";
    if (
        (player === "rock" && bot === "scissors") ||
        (player === "paper" && bot === "rock") ||
        (player === "scissors" && bot === "paper")
    ) {
        return "Gy≈ëzt√©l!";
    } else {
        return "Vesztett√©l!";
    }
}

function determineWinner2(player, bot) {
    if (player === bot) return "=";
    if (
        (player === "rock" && bot === "scissors") ||
        (player === "paper" && bot === "rock") ||
        (player === "scissors" && bot === "paper")
    ) {
        return ">";
    } else {
        return "<";
    }
}

// üìå 5Ô∏è‚É£ UI friss√≠t√©s
function updateStatsUI() {
    winsText.textContent = stats.wins;
    lossesText.textContent = stats.losses;
    drawsText.textContent = stats.draws;
}

// üìå 6Ô∏è‚É£ Statisztik√°k t√∂rl√©se (XMLHttpRequest)
resetButton.addEventListener("click", () => {
    const xhr = new XMLHttpRequest();
    xhr.open("POST", "http://localhost:3000/stats/reset", true);
    xhr.onreadystatechange = function () {
        if (xhr.readyState === 4 && xhr.status === 200) {
            stats = { wins: 0, losses: 0, draws: 0 };
            fetchStats(); // Friss√≠tj√ºk a szerverr≈ël
        }
    };
    xhr.send();
});

// üìå 7Ô∏è‚É£ Indul√°skor bet√∂ltj√ºk az adatokat a szerverr≈ël
fetchStats();
